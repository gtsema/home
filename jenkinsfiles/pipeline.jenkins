#!groovy

properties([disableConcurrentBuilds()])

pipeline {
    agent any
    
    environment {
        TOMCAT_USER = "deploy"
        TOMCAT_PASSWORD = "jendeploy"
        TARGET_PATH = "${env.WORKSPACE}/target/home.war"
        WAR_PATH = "${env.WORKSPACE}/target/ROOT.war"
        BACKUP_PATH = "${env.WORKSPACE}/../backups/ROOT.war"
        TOMCAT_HOST = "localhost"
        TOMCAT_PORT = "8080"
        CONTEX_NAME = "ROOT"
    }
    
    triggers {
        pollSCM('0 * * * *')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage("maven: create war-package...") {
            steps {
                sh 'mvn clean package'
            }
        }
        stage("Changes in access rights for scripts...") {
            steps {
                sh "chmod +x -R ${env.WORKSPACE}/jenkinsfiles"
            }
        }
        stage("Check deploy to root...") {
            steps {
                script {
                    RESPONSE = sh (
                        script: "jenkinsfiles/checkDeploying.sh",
                        returnStdout: true
                    )
                }
                
                echo "war file is $RESPONCE to root."
            }
        }
        stage("Undeploy webapp...") {
            when { equals expected: "deployed\n", actual: RESPONCE }
            steps {
                sh("jenkinsfiles/undeploy.sh");
            }
        }
        stage("Rename the target file...") {
            steps {
                sh "mv $TARGET_PATH $WAR_PATH"
            }
        }
        stage("Deploy webapp...") {
            steps {
                sh("jenkinsfiles/deploy.sh");
            }
        }
        stage("Check deploying to root...") {
            steps {
                script {
                    RESPONSE = sh (
                        script: "jenkinsfiles/checkDeploying.sh",
                        returnStdout: true
                    )
                }
                
                echo "war file is $RESPONCE to root."
            }
        }
        stage("Backup") {
            when { equals expected: "deployed\n", actual: RESPONCE }
            steps {
                sh "cp -f $WAR_PATH $BACKUP_PATH"
            }
        }
        stage("Roll back") {
            when { equals expected: "undeployed\n", actual: RESPONCE }
            steps {
                sh "cp -f $BACKUP_PATH $WAR_PATH"
            }
        }
    }
}
